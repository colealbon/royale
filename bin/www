#!/usr/bin/env node

require("babel-core/register")({
    "presets": [
        "es2015",
        "stage-0"
    ]
});
require("babel-polyfill");

const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');
const config = require(__dirname + '/../config/options.js');
const fs = require('fs');
const path = require('path');

var openpgp = require('../test/openpgp162/openpgp.js');
// LAUNCH HTTP SERVER
var port = normalizePort(process.env.PORT || config.port || '3000');
var server = http.createServer(app.callback());

//console.log('HTTP Server started on port ' + port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var Gun = require('gun');
var gun = Gun({
	file: 'gundata.json',
	web: server
})

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
    if (port >= 0) {
    return port;
    }
    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
    }
}

function onListening() {
var addr = server.address();
var bind = typeof addr === 'string'
? 'pipe ' + addr
: 'port ' + addr.port;
//debug('Listening on ' + bind);
//console.log(addr, addr.port);
console.log('HTTP Server started on port ' + addr.port);
}
